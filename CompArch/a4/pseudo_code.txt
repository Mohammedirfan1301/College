ALU only supports the following operations:
A + B
A AND B
A
NOT A

N is set when the ALU output is negative
Z is set when the ALU output is zero

The ALU output then goes into the shifter, which can shift it 1 bit either direction.
Possible to left shift 2 bits if you do R + R in the ALU, then shift left using the shifter.

MULT:
Take value at top of stack, call this "A", multiply it by the value in "mmmmmm", call this "B".
Basically need to add the value A as many times as B.
A = top of stack			// Number at top of stack
B = mmm mmm           // 6 bit number after MULT opcode
C = 0									// Will hold final multiplication value
while (b > 0) {
	C = A + C;					// Add A and C, A is value to be mult. and C is final mult value.
	* check for overflow *
	if (C is negative) {	// If we hit negative, then we overflowed
		AC = -1;		// make AC -1 and return.
		return;
	}
	B--;					// decrement counter each pass
}
// mult was successful so:
top of stack = C 		// need to replace the value at the top of the stack with C, final mult value
AC = 0;							// AC should equal 0 and we should return.
return;

DIV:
Get top of stack, divide by number at the location right under the top stack ptr.

SP   = dividend
SP+1 = divisor
SP-1 = Remainder
SP-2 = Quotient

If absolute value of the divisor is greater than the absolute value of the dividend,
the quotient should be set to 0 and the remainder set to the absolute value of the
dividend.

If the divisor is equal to 0, the remainder should be set to -1 and the quotient should
be set to 0.

After the operation the AC should be set to 0 if division was legal, or -1 if an attempt
to divide by 0.

Ignore the ??? ??? bits.

A = SP 			// dividend
B = SP+1		// divisor
E = 0;			// counter

// ignore if the number is negative for now.

C = inverse (B);
D = A + C
if (D == 0) {
	SP-1 = 0;					// no remainder
	SP-2 = E;					// quotient
}
if (D == negative ) {
	D = inverse(D);
	SP-1 = D;					// remainder
	SP-2 = E;					// quotient
}
else {
	E++;
	goto beginning of loop
}
